// Mocks generated by Mockito 5.3.2 from annotations
// in git_hub/test/mocks/test_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:git_hub/core/http/http_service.dart' as _i3;
import 'package:git_hub/models/contributors/contributor_response.dart' as _i9;
import 'package:git_hub/models/get_repositories/repository_response.dart'
    as _i6;
import 'package:git_hub/models/user_details/user_details_response.dart' as _i2;
import 'package:git_hub/repository/contributors/contributors_interface.dart'
    as _i8;
import 'package:git_hub/repository/get_repositories/get_repositories_interface.dart'
    as _i5;
import 'package:git_hub/repository/user_details/user_details_interface.dart'
    as _i7;
import 'package:git_hub/util/dispatcher.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObject_0 extends _i1.SmartFake implements Object {
  _FakeObject_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserDetailsResponse_1 extends _i1.SmartFake
    implements _i2.UserDetailsResponse {
  _FakeUserDetailsResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i3.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Object> getResponse(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #getResponse,
          [uri],
        ),
        returnValue: _i4.Future<Object>.value(_FakeObject_0(
          this,
          Invocation.method(
            #getResponse,
            [uri],
          ),
        )),
      ) as _i4.Future<Object>);
}

/// A class which mocks [GetRepositoriesRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRepositoriesRepo extends _i1.Mock
    implements _i5.GetRepositoriesRepo {
  MockGetRepositoriesRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i6.RepositoryResponse>> getRepositories(
          {required String? language}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRepositories,
          [],
          {#language: language},
        ),
        returnValue: _i4.Future<List<_i6.RepositoryResponse>>.value(
            <_i6.RepositoryResponse>[]),
      ) as _i4.Future<List<_i6.RepositoryResponse>>);
}

/// A class which mocks [UserDetailsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDetailsRepository extends _i1.Mock
    implements _i7.UserDetailsRepository {
  MockUserDetailsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserDetailsResponse> getUserDetails({required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDetails,
          [],
          {#url: url},
        ),
        returnValue: _i4.Future<_i2.UserDetailsResponse>.value(
            _FakeUserDetailsResponse_1(
          this,
          Invocation.method(
            #getUserDetails,
            [],
            {#url: url},
          ),
        )),
      ) as _i4.Future<_i2.UserDetailsResponse>);
}

/// A class which mocks [ContributorsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockContributorsRepository extends _i1.Mock
    implements _i8.ContributorsRepository {
  MockContributorsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i9.ContributorResponse>> getContributors(
          {required String? repositoryFullName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContributors,
          [],
          {#repositoryFullName: repositoryFullName},
        ),
        returnValue: _i4.Future<List<_i9.ContributorResponse>>.value(
            <_i9.ContributorResponse>[]),
      ) as _i4.Future<List<_i9.ContributorResponse>>);
}

/// A class which mocks [Dispatcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockDispatcher extends _i1.Mock implements _i10.Dispatcher {
  MockDispatcher() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void call(Object? action) => super.noSuchMethod(
        Invocation.method(
          #call,
          [action],
        ),
        returnValueForMissingStub: null,
      );
}
